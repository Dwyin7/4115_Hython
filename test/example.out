; ModuleID = 'hython'
source_filename = "hython"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @main() {
entry:
  %test_rec_result = call i32 @test_rec(i32 10)
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %test_rec_result)
  ret i32 1
}

define i32 @factorial(i32 %n) {
entry:
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  %n2 = load i32, i32* %n1, align 4
  %tmp = icmp eq i32 %n2, 1
  br i1 %tmp, label %then, label %else

if_end:                                           ; No predecessors!
  ret i32 1

then:                                             ; preds = %entry
  ret i32 1

else:                                             ; preds = %entry
  %n3 = load i32, i32* %n1, align 4
  %n4 = load i32, i32* %n1, align 4
  %tmp5 = sub i32 %n4, 1
  %factorial_result = call i32 @factorial(i32 %tmp5)
  %tmp6 = mul i32 %n3, %factorial_result
  ret i32 %tmp6
}

define i32 @fibonacci(i32 %n) {
entry:
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  %n2 = load i32, i32* %n1, align 4
  %tmp = icmp eq i32 %n2, 0
  br i1 %tmp, label %then, label %else

if_end:                                           ; preds = %if_end5
  ret i32 1

then:                                             ; preds = %entry
  ret i32 0

else:                                             ; preds = %entry
  %n3 = load i32, i32* %n1, align 4
  %tmp4 = icmp eq i32 %n3, 1
  br i1 %tmp4, label %then6, label %else7

if_end5:                                          ; No predecessors!
  br label %if_end

then6:                                            ; preds = %else
  ret i32 1

else7:                                            ; preds = %else
  %fst = alloca i32, align 4
  %n8 = load i32, i32* %n1, align 4
  %tmp9 = sub i32 %n8, 1
  %fibonacci_result = call i32 @fibonacci(i32 %tmp9)
  store i32 %fibonacci_result, i32* %fst, align 4
  %snd = alloca i32, align 4
  %n10 = load i32, i32* %n1, align 4
  %tmp11 = sub i32 %n10, 2
  %fibonacci_result12 = call i32 @fibonacci(i32 %tmp11)
  store i32 %fibonacci_result12, i32* %snd, align 4
  %fst13 = load i32, i32* %fst, align 4
  %snd14 = load i32, i32* %snd, align 4
  %tmp15 = add i32 %fst13, %snd14
  ret i32 %tmp15
}

define i32 @test_rec(i32 %n) {
entry:
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  %n2 = load i32, i32* %n1, align 4
  %tmp = icmp eq i32 %n2, 0
  br i1 %tmp, label %then, label %else

if_end:                                           ; No predecessors!
  ret i32 1

then:                                             ; preds = %entry
  ret i32 1

else:                                             ; preds = %entry
  %x = alloca i32, align 4
  %n3 = load i32, i32* %n1, align 4
  %factorial_result = call i32 @factorial(i32 %n3)
  store i32 %factorial_result, i32* %x, align 4
  %y = alloca i32, align 4
  %n4 = load i32, i32* %n1, align 4
  %tmp5 = sub i32 %n4, 1
  %test_rec_result = call i32 @test_rec(i32 %tmp5)
  store i32 %test_rec_result, i32* %y, align 4
  %x6 = load i32, i32* %x, align 4
  %y7 = load i32, i32* %y, align 4
  %tmp8 = add i32 %x6, %y7
  ret i32 %tmp8
}

declare i32 @printf(i8*, ...)
