; ModuleID = 'hython'
source_filename = "hython"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.4 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.5 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @main() {
entry:
  %test_deep_nested_logic_result = call i32 @test_deep_nested_logic()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.5, i32 0, i32 0), i32 0)
  ret i32 1
}

define i32 @test_deep_nested_logic() {
entry:
  %i = alloca i32, align 4
  store i32 4, i32* %i, align 4
  %acc = alloca i32, align 4
  store i32 0, i32* %acc, align 4
  br label %while

while:                                            ; preds = %if_end55, %entry
  %i1 = load i32, i32* %i, align 4
  %tmp = icmp ne i32 %i1, 0
  br i1 %tmp, label %while_body, label %while_end64

while_body:                                       ; preds = %while
  %i2 = load i32, i32* %i, align 4
  %tmp3 = sub i32 %i2, 1
  store i32 %tmp3, i32* %i, align 4
  %j = alloca i32, align 4
  store i32 3, i32* %j, align 4
  br label %while4

while4:                                           ; preds = %if_end, %while_body
  %j5 = load i32, i32* %j, align 4
  %tmp6 = icmp ne i32 %j5, 0
  br i1 %tmp6, label %while_body7, label %while_end52

while_body7:                                      ; preds = %while4
  %j8 = load i32, i32* %j, align 4
  %tmp9 = sub i32 %j8, 1
  store i32 %tmp9, i32* %j, align 4
  %j10 = load i32, i32* %j, align 4
  %tmp11 = icmp ne i32 %j10, 2
  br i1 %tmp11, label %then, label %else29

if_end:                                           ; preds = %while_end49, %while_end
  %acc50 = load i32, i32* %acc, align 4
  %printf51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i32 %acc50)
  br label %while4

then:                                             ; preds = %while_body7
  %acc12 = load i32, i32* %acc, align 4
  %tmp13 = add i32 %acc12, 3
  store i32 %tmp13, i32* %acc, align 4
  %x = alloca i32, align 4
  store i32 2, i32* %x, align 4
  br label %while14

while14:                                          ; preds = %if_end22, %then
  %x15 = load i32, i32* %x, align 4
  %tmp16 = icmp ne i32 %x15, 0
  br i1 %tmp16, label %while_body17, label %while_end

while_body17:                                     ; preds = %while14
  %x18 = load i32, i32* %x, align 4
  %tmp19 = sub i32 %x18, 1
  store i32 %tmp19, i32* %x, align 4
  %x20 = load i32, i32* %x, align 4
  %tmp21 = icmp ne i32 %x20, 1
  br i1 %tmp21, label %then23, label %else

if_end22:                                         ; preds = %else, %then23
  %acc28 = load i32, i32* %acc, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %acc28)
  br label %while14

then23:                                           ; preds = %while_body17
  %acc24 = load i32, i32* %acc, align 4
  %tmp25 = add i32 %acc24, 5
  store i32 %tmp25, i32* %acc, align 4
  br label %if_end22

else:                                             ; preds = %while_body17
  %acc26 = load i32, i32* %acc, align 4
  %tmp27 = add i32 %acc26, 2
  store i32 %tmp27, i32* %acc, align 4
  br label %if_end22

while_end:                                        ; preds = %while14
  br label %if_end

else29:                                           ; preds = %while_body7
  %acc30 = load i32, i32* %acc, align 4
  %tmp31 = add i32 %acc30, 1
  store i32 %tmp31, i32* %acc, align 4
  %y = alloca i32, align 4
  store i32 3, i32* %y, align 4
  br label %while32

while32:                                          ; preds = %if_end40, %else29
  %y33 = load i32, i32* %y, align 4
  %tmp34 = icmp ne i32 %y33, 0
  br i1 %tmp34, label %while_body35, label %while_end49

while_body35:                                     ; preds = %while32
  %y36 = load i32, i32* %y, align 4
  %tmp37 = sub i32 %y36, 1
  store i32 %tmp37, i32* %y, align 4
  %y38 = load i32, i32* %y, align 4
  %tmp39 = icmp ne i32 %y38, 2
  br i1 %tmp39, label %then41, label %else44

if_end40:                                         ; preds = %else44, %then41
  %acc47 = load i32, i32* %acc, align 4
  %printf48 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %acc47)
  br label %while32

then41:                                           ; preds = %while_body35
  %acc42 = load i32, i32* %acc, align 4
  %tmp43 = add i32 %acc42, 4
  store i32 %tmp43, i32* %acc, align 4
  br label %if_end40

else44:                                           ; preds = %while_body35
  %acc45 = load i32, i32* %acc, align 4
  %tmp46 = add i32 %acc45, 1
  store i32 %tmp46, i32* %acc, align 4
  br label %if_end40

while_end49:                                      ; preds = %while32
  br label %if_end

while_end52:                                      ; preds = %while4
  %i53 = load i32, i32* %i, align 4
  %tmp54 = icmp ne i32 %i53, 3
  br i1 %tmp54, label %then56, label %else59

if_end55:                                         ; preds = %else59, %then56
  %acc62 = load i32, i32* %acc, align 4
  %printf63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i32 %acc62)
  br label %while

then56:                                           ; preds = %while_end52
  %acc57 = load i32, i32* %acc, align 4
  %tmp58 = add i32 %acc57, 10
  store i32 %tmp58, i32* %acc, align 4
  br label %if_end55

else59:                                           ; preds = %while_end52
  %acc60 = load i32, i32* %acc, align 4
  %tmp61 = sub i32 %acc60, 5
  store i32 %tmp61, i32* %acc, align 4
  br label %if_end55

while_end64:                                      ; preds = %while
  %acc65 = load i32, i32* %acc, align 4
  %printf66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.4, i32 0, i32 0), i32 %acc65)
  ret i32 1
}

declare i32 @printf(i8*, ...)
