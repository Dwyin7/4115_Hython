; ModuleID = 'hython'
source_filename = "hython"

@fmt = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.1 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.2 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@fmt.3 = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1

define i32 @main() {
entry:
  %test_deep_nested_logic_result = call i32 @test_deep_nested_logic()
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.3, i32 0, i32 0), i32 0)
  ret i32 1
}

define i32 @test_deep_nested_logic() {
entry:
  %i = alloca [3 x i32], align 4
  store [3 x i32] [i32 1, i32 2, i32 3], [3 x i32]* %i, align 4
  %j = alloca [3 x i32], align 4
  store [3 x i32] [i32 1, i32 2, i32 3], [3 x i32]* %j, align 4
  %k = alloca [3 x i32], align 4
  %result_tensor = alloca [3 x i32], align 4
  %elem1_ptr = getelementptr [3 x i32], [3 x i32]* %i, i32 0, i32 0
  %elem2_ptr = getelementptr [3 x i32], [3 x i32]* %j, i32 0, i32 0
  %elem1 = load i32, i32* %elem1_ptr, align 4
  %elem2 = load i32, i32* %elem2_ptr, align 4
  %sum = add i32 %elem1, %elem2
  %result_ptr = getelementptr [3 x i32], [3 x i32]* %result_tensor, i32 0, i32 0
  store i32 %sum, i32* %result_ptr, align 4
  %elem1_ptr1 = getelementptr [3 x i32], [3 x i32]* %i, i32 0, i32 1
  %elem2_ptr2 = getelementptr [3 x i32], [3 x i32]* %j, i32 0, i32 1
  %elem13 = load i32, i32* %elem1_ptr1, align 4
  %elem24 = load i32, i32* %elem2_ptr2, align 4
  %sum5 = add i32 %elem13, %elem24
  %result_ptr6 = getelementptr [3 x i32], [3 x i32]* %result_tensor, i32 0, i32 1
  store i32 %sum5, i32* %result_ptr6, align 4
  %elem1_ptr7 = getelementptr [3 x i32], [3 x i32]* %i, i32 0, i32 2
  %elem2_ptr8 = getelementptr [3 x i32], [3 x i32]* %j, i32 0, i32 2
  %elem19 = load i32, i32* %elem1_ptr7, align 4
  %elem210 = load i32, i32* %elem2_ptr8, align 4
  %sum11 = add i32 %elem19, %elem210
  %result_ptr12 = getelementptr [3 x i32], [3 x i32]* %result_tensor, i32 0, i32 2
  store i32 %sum11, i32* %result_ptr12, align 4
  %elem = load [3 x i32], [3 x i32]* %result_tensor, align 4
  store [3 x i32] %elem, [3 x i32]* %k, align 4
  %elem_ptr = getelementptr [3 x i32], [3 x i32]* %k, i32 0, i32 0
  %elem14 = load i32, i32* %elem_ptr, align 4
  %printf = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt, i32 0, i32 0), i32 %elem14)
  %elem_ptr15 = getelementptr [3 x i32], [3 x i32]* %k, i32 0, i32 1
  %elem16 = load i32, i32* %elem_ptr15, align 4
  %printf17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.1, i32 0, i32 0), i32 %elem16)
  %elem_ptr18 = getelementptr [3 x i32], [3 x i32]* %k, i32 0, i32 2
  %elem20 = load i32, i32* %elem_ptr18, align 4
  %printf21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @fmt.2, i32 0, i32 0), i32 %elem20)
  ret i32 1
}

declare i32 @printf(i8*, ...)
